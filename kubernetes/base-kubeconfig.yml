apiVersion: v1
data:
  CJW_GOOGLE_ANALYTICS: ""
kind: ConfigMap
metadata:
  name: cjw-google-analytics-552b9fb42f
---
apiVersion: v1
data:
  CJW_HEAP_ANALYTICS_ID: ""
kind: ConfigMap
metadata:
  name: cjw-heap-analytics-74762df68f
---
apiVersion: v1
data:
  CJW_INTERCOM_APP_ID: ""
kind: ConfigMap
metadata:
  name: cjw-intercom-c55tdb5247
---
apiVersion: v1
data:
  404.http: |
    HTTP/1.1 404 Not Found
    Cache-Control: no-cache
    Connection: close
    Content-Type: text/plain; charset=ascii

    You requested a page that does not exist.
  haproxy.cfg: |
    # We use haproxy to redirect HTTP to HTTPS. (Django is inefficient at this.)
    global
        nbproc 1
        nbthread 1
        log stdout format raw local0 info

    defaults
        log global
        timeout connect 10s
        timeout client 60s
        timeout server 10s
        timeout tunnel 10s
        timeout client-fin 10s
        mode http
        option httplog

    frontend httporhttps
        bind *:8080
        http-request deny deny_status 200 if { path /healthz }
        default_backend always404

    backend always404
        errorfile 503 /usr/local/etc/haproxy/404.http
kind: ConfigMap
metadata:
  name: http-404-config
---
apiVersion: v1
data:
  domainName: ""
kind: ConfigMap
metadata:
  name: workbench-config-4869m2gt8k
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-internal-tusd-hooks-service
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: frontend-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  name: frontend-service
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: frontend-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: http-404-service
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: http-404-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: tusd-hooks-service
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: tusd-hooks-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: tusd-internal-service
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: tusd-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: tusd-service
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: tusd-app
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-s3: "true"
  name: cron-delta-deleter-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cron-delta-deleter-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: cron-delta-deleter-app
    spec:
      containers:
      - command:
        - bin/cron-delta-deleter
        env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        resources:
          limits:
            cpu: 0.1
            memory: 200Mi
          requests:
            cpu: 0.1
            memory: 200Mi
      serviceAccountName: cron-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-rabbitmq: "true"
  name: cron-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cron-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: cron-app
    spec:
      containers:
      - env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ASGI_THREADS
          value: "2"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        resources:
          limits:
            cpu: 0.1
            memory: 200Mi
          requests:
            cpu: 0.1
            memory: 200Mi
      serviceAccountName: cron-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-s3: "true"
  name: cron-expired-session-deleter-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cron-expired-session-deleter-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: cron-expired-session-deleter-app
    spec:
      containers:
      - command:
        - bin/cron-expired-session-deleter
        env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        resources:
          limits:
            cpu: 0.1
            memory: 200Mi
          requests:
            cpu: 0.1
            memory: 200Mi
      serviceAccountName: cron-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-s3: "true"
  name: cron-lesson-workflow-deleter-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cron-lesson-workflow-deleter-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: cron-lesson-workflow-deleter-app
    spec:
      containers:
      - command:
        - bin/cron-lesson-workflow-deleter
        env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        resources:
          limits:
            cpu: 0.1
            memory: 200Mi
          requests:
            cpu: 0.1
            memory: 200Mi
      serviceAccountName: cron-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/unsafe: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-rabbitmq: "true"
    workbenchdata.com/uses-s3: "true"
  name: fetcher-deployment
spec:
  selector:
    matchLabels:
      app: fetcher-app
  template:
    metadata:
      labels:
        app: fetcher-app
    spec:
      containers:
      - env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ASGI_THREADS
          value: "2"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          name: chroot
      - command:
        - sh
        - -c
        - sleep infinity
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -x
              - /app/cjwkernel/teardown-sandboxes.sh
        name: teardown-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      initContainers:
      - command:
        - bash
        - -x
        - /app/cjwkernel/setup-sandboxes.sh
        - all
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: setup-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      serviceAccountName: fetcher-sa
      volumes:
      - emptyDir: {}
        name: chroot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/unsafe: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-rabbitmq: "true"
    workbenchdata.com/uses-s3: "true"
    workbenchdata.com/uses-smtp: "true"
  name: frontend-deployment
spec:
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ASGI_THREADS
          value: "5"
        - name: CJW_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: value
              name: cjw-secret-key
        - name: HTTPS
          value: "on"
        - name: CJW_HOME_URL
          valueFrom:
            configMapKeyRef:
              key: homeUrl
              name: workbench-config-4869m2gt8k
        - name: CJW_HELP_EMAIL
          valueFrom:
            configMapKeyRef:
              key: helpEmail
              name: workbench-config-4869m2gt8k
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        - name: STATIC_URL
          value: https://static.$(_DOMAIN_NAME)/
        - name: TUS_CREATE_UPLOAD_URL
          value: http://tusd-internal-service/files
        - name: TUS_EXTERNAL_URL_PREFIX_OVERRIDE
          value: https://upload.$(_DOMAIN_NAME)/files
        envFrom:
        - prefix: CJW_SMTP_
          secretRef:
            name: cjw-smtp-config
        - configMapRef:
            name: cjw-heap-analytics-74762df68f
        - configMapRef:
            name: cjw-intercom-c55tdb5247
        - configMapRef:
            name: cjw-google-analytics-552b9fb42f
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          name: chroot
      - command:
        - sh
        - -c
        - sleep infinity
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -x
              - /app/cjwkernel/teardown-sandboxes.sh
        name: teardown-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      initContainers:
      - command:
        - bash
        - -x
        - /app/cjwkernel/setup-sandboxes.sh
        - only-readonly
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: setup-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      serviceAccountName: frontend-sa
      volumes:
      - emptyDir: {}
        name: chroot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: http-404-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: http-404-app
  template:
    metadata:
      labels:
        app: http-404-app
    spec:
      containers:
      - command:
        - haproxy
        - -f
        - /usr/local/etc/haproxy/haproxy.cfg
        - -m
        - "90"
        - -db
        image: haproxy:2.1.2
        name: http-404
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        resources:
          limits:
            cpu: 0.1
            memory: 50Mi
          requests:
            cpu: 0.1
            memory: 50Mi
        volumeMounts:
        - mountPath: /usr/local/etc/haproxy/haproxy.cfg
          name: http-404-config
          subPath: haproxy.cfg
        - mountPath: /usr/local/etc/haproxy/404.http
          name: http-404-config
          subPath: 404.http
      volumes:
      - configMap:
          name: http-404-config
        name: http-404-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/uses-rabbitmq: "true"
  name: intercom-sink-deployment
spec:
  selector:
    matchLabels:
      app: intercom-sink-app
  template:
    metadata:
      labels:
        app: intercom-sink-app
    spec:
      containers:
      - env:
        - name: CJW_INTERCOM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: ACCESS_TOKEN
              name: cjw-intercom-sink-intercom-secret
        - name: CJW_INTERCOM_QUEUE_NAME
          value: intercom
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        resources:
          limits:
            cpu: 150m
            memory: 300Mi
          requests:
            cpu: 150m
            memory: 300Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/preemptible: "true"
    workbenchdata.com/unsafe: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-rabbitmq: "true"
    workbenchdata.com/uses-s3: "true"
    workbenchdata.com/uses-smtp: "true"
  name: renderer-deployment
spec:
  selector:
    matchLabels:
      app: renderer-app
  template:
    metadata:
      labels:
        app: renderer-app
    spec:
      containers:
      - env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ASGI_THREADS
          value: "2"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom:
        - prefix: CJW_SMTP_
          secretRef:
            name: cjw-smtp-config
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          name: chroot
      - command:
        - sh
        - -c
        - sleep infinity
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -x
              - /app/cjwkernel/teardown-sandboxes.sh
        name: teardown-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      initContainers:
      - command:
        - bash
        - -x
        - /app/cjwkernel/setup-sandboxes.sh
        - all
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: setup-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      serviceAccountName: renderer-sa
      volumes:
      - emptyDir: {}
        name: chroot
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tusd-deployment
spec:
  selector:
    matchLabels:
      app: tusd-app
  template:
    metadata:
      labels:
        app: tusd-app
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - tusd-app
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - -port=8080
        - -behind-proxy
        - -s3-bucket=upload.$(DOMAIN_NAME)
        - -hooks-http=http://tusd-hooks-service/tusd-hooks
        - -hooks-enabled-events=pre-finish
        env:
        - name: DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        image: tusproject/tusd:v1.6.0
        name: tusd
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
        resources:
          limits:
            cpu: 0.3
            memory: 512Mi
          requests:
            cpu: 0.3
            memory: 512Mi
      serviceAccountName: tusd-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    workbenchdata.com/unsafe: "true"
    workbenchdata.com/uses-database: "true"
    workbenchdata.com/uses-rabbitmq: "true"
    workbenchdata.com/uses-s3: "true"
  name: tusd-hooks-deployment
spec:
  selector:
    matchLabels:
      app: tusd-hooks-app
  template:
    metadata:
      labels:
        app: tusd-hooks-app
    spec:
      containers:
      - env:
        - name: CJW_PRODUCTION
          value: "True"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: ASGI_THREADS
          value: "5"
        - name: _DOMAIN_NAME
          valueFrom:
            configMapKeyRef:
              key: domainName
              name: workbench-config-4869m2gt8k
        - name: S3_BUCKET_NAME_PATTERN
          value: '%s.$(_DOMAIN_NAME)'
        envFrom: []
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: app
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          name: chroot
      - command:
        - sh
        - -c
        - sleep infinity
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -x
              - /app/cjwkernel/teardown-sandboxes.sh
        name: teardown-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      initContainers:
      - command:
        - bash
        - -x
        - /app/cjwkernel/setup-sandboxes.sh
        - only-readonly
        image: 848416313321.dkr.ecr.eu-west-1.amazonaws.com/workbench:632e44285e65d97fcedebddd5ac12c37ff62c431
        name: setup-sandboxes
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/cjwkernel/chroot
          mountPropagation: Bidirectional
          name: chroot
      serviceAccountName: frontend-sa
      volumes:
      - emptyDir: {}
        name: chroot
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: frontend-service
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.global-static-ip-name: tusd-ip
    networking.gke.io/managed-certificates: tusd-cert
  name: tusd-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: http-404-service
            port:
              number: 80
        path: /files
        pathType: Exact
      - backend:
          service:
            name: http-404-service
            port:
              number: 80
        path: /files/
        pathType: Exact
      - backend:
          service:
            name: tusd-service
            port:
              number: 80
        path: /files/
        pathType: Prefix
